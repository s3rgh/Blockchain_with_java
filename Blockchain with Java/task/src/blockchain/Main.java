package blockchain;

import java.util.ArrayList;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class Main {
    public static void main(String[] args) {
        var minerCount = 5;
        var runDurationSeconds = 1;
        var executor = Executors.newFixedThreadPool(minerCount);
        var futures = new ArrayList<Future<Block>>();

        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞–π–Ω–µ—Ä–æ–≤
        for (int i = 0; i < minerCount; i++) {
            futures.add(executor.submit(new Miner(String.valueOf(i))));
        }

        //System.out.println("‚õèÔ∏è  Mining started with " + minerCount + " miners. Running for " + runDurationSeconds + " seconds...");

        try {
            Thread.sleep(runDurationSeconds * 1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        } finally {
            //System.out.println("\nüõë Shutting down miners...");
            executor.shutdownNow(); // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏

//             –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Ö, –∫—Ç–æ —É—Å–ø–µ–ª –¥–æ–±—ã—Ç—å –±–ª–æ–∫
//            for (Future<Block> future : futures) {
//                try {
//                    Block block = future.get(1, TimeUnit.SECONDS); // –Ω–µ–±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç
//                    if (block != null) {
//                        System.out.println("üèÜ Final block by miner #" + block.getCreatedBy() + " (ID: " + block.getId() + ")");
//                    }
//                } catch (Exception ignored) {
//                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º ‚Äî –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ—å—é—á–µ—Ä–æ–≤ –Ω–µ –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è
//                }
//            }

            //System.out.println("‚úÖ Mining finished. Total blocks: " + (blockchain.getLastBlock().getId() + 1));
        }
    }
}